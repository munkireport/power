#!/usr/local/munkireport/munkireport-python3
# power script by tuxudo for MunkiReport

import subprocess
import plistlib
import os
import sys
import re
import platform
import datetime

def get_battery_profiler():
    '''Uses system profiler to get power info for this machine.'''
    cmd = ['/usr/sbin/system_profiler', 'SPPowerDataType', '-xml']
    output = subprocess.check_output(cmd)
    try:
        plist = plistlib.readPlistFromString(output)
    except AttributeError as e:
        plist = plistlib.loads(output)

    # system_profiler xml is an array
    sp_dict = plist[0]
    items = sp_dict['_items']

    batteryprofiler = {}

    for obj in items:
        for item in obj:
            if item == 'sppower_current_amperage':
                batteryprofiler['AmperagemA'] = format((float(obj[item])/1000),'.3f')
            elif item == 'sppower_current_voltage':
                batteryprofiler['Voltage'] = format((float(obj[item])/1000),'.3f')
            elif item == 'sppower_battery_charger_connected':
                batteryprofiler['ExternalConnected'] = obj[item]
            elif item == 'sppower_ac_charger_ID':
                batteryprofiler['AdapterID'] = obj[item]
            elif item == 'sppower_ac_charger_watts':
                batteryprofiler['attage'] = obj[item] # This is not a typo
            elif item == 'sppower_ac_charger_family':
                batteryprofiler['FamilyCode'] = obj[item]
            elif item == 'sppower_ac_charger_serial_number':
                batteryprofiler['SerialNumber'] = obj[item]
            elif item == 'sppower_ac_charger_name':
                batteryprofiler['adapter_name'] = obj[item]
            elif item == 'sppower_ac_charger_manufacturer':
                batteryprofiler['adapter_manufacturer'] = obj[item]
            elif item == 'sppower_ups_installed':
                batteryprofiler['UPSInstalled'] = obj[item]
            elif item == 'sppower_battery_health_info':
                try:
                    batteryprofiler['condition'] = obj['sppower_battery_health_info']['sppower_battery_health']
                except:
                    pass
            elif item == 'sppower_battery_installed' and obj['sppower_battery_installed'] == "FALSE":
                batteryprofiler['condition'] = "No Battery"
            elif item == 'sppower_battery_charge_info':
                if 'sppower_battery_max_capacity' in obj[item]: # Keep for 10.8- compatibility vv
                    batteryprofiler['MaxCapacity'] = obj[item]['sppower_battery_max_capacity']
                if 'sppower_battery_current_capacity' in obj[item]:
                    batteryprofiler['CurrentCapacity'] = obj[item]['sppower_battery_current_capacity'] # Keep for 10.8- compatibility ^^
                if 'sppower_battery_is_charging' in obj[item]:
                    batteryprofiler['IsCharging'] = obj[item]['sppower_battery_is_charging']
                if 'sppower_battery_fully_charged' in obj[item]:
                    batteryprofiler['FullyCharged'] = obj[item]['sppower_battery_fully_charged']
#                if 'sppower_battery_state_of_charge' in obj[item]:
#                    batteryprofiler['CurCharge'] = obj[item]['sppower_battery_state_of_charge']
            elif item == 'sppower_battery_model_info':
                if 'sppower_battery_firmware_version' in obj[item]:
                    batteryprofiler['FirmwareVersion'] = obj[item]['sppower_battery_firmware_version']
                if 'sppower_battery_device_name' in obj[item]:
                    batteryprofiler['BatteryName'] = obj[item]['sppower_battery_device_name']
                if 'sppower_battery_manufacturer' in obj[item]:
                    batteryprofiler['Manufacturer'] = obj[item]['sppower_battery_manufacturer']
                if 'sppower_battery_serial_number' in obj[item]:
                    batteryprofiler['BatterySerialNumber'] = obj[item]['sppower_battery_serial_number']
                if 'sppower_battery_hardware_revision' in obj[item]:
                    batteryprofiler['BatteryRevision'] = obj[item]['sppower_battery_hardware_revision']
                if 'sppower_battery_cell_revision' in obj[item]:
                    batteryprofiler['BatteryCellRevision'] = obj[item]['sppower_battery_cell_revision']

    return batteryprofiler

def get_battery_stats():
    
    if getDarwinVersion() < 12:
        # 10.8 (Darwin 12) and lower return this value differently
        cmd = ['/usr/sbin/ioreg', '-n', 'AppleSmartBattery', '-r']
        output = subprocess.check_output(cmd)
        try:
            for item in output.decode("utf-8", errors="ignore").split("\n"):
                if "DesignCapacity" in item:
                    batteryinfo['DesignCapacity'] = remove_all('      "DesignCapacity" = ', item).strip()
                elif "Temperature" in item:
                    batteryinfo['Temperature'] = re.sub('[^0-9]','', remove_all('      "Temperature" = ', item).strip())
                elif "TimeRemaining" in item:
                    batteryinfo['TimeRemaining'] = remove_all('      "TimeRemaining" = ', item).strip()
                elif "InstantTimeToEmpty" in item:
                    batteryinfo['InstantTimeToEmpty'] = remove_all('      "InstantTimeToEmpty" = ', item).strip()
                elif "PackReserve" in item:
                    batteryinfo['PackReserve'] = remove_all('      "PackReserve" = ', item).strip()
                elif "AvgTimeToFull" in item:
                    batteryinfo['AvgTimeToFull'] = remove_all('      "AvgTimeToFull" = ', item).strip()
                elif "AvgTimeToEmpty" in item:
                    batteryinfo['AvgTimeToEmpty'] = remove_all('      "AvgTimeToEmpty" = ', item).strip()
                elif "DesignCycleCount9C" in item:
                    batteryinfo['DesignCycleCount9C'] = remove_all('      "DesignCycleCount9C" = ', item).strip()
                elif "PermanentFailureStatus" in item:
                    batteryinfo['PermanentFailureStatus'] = remove_all('      "PermanentFailureStatus" = ', item).strip()
                elif "ManufactureDate" in item:
                    batteryinfo['ManufactureDate'] = remove_all('      "ManufactureDate" = ', item).strip()

            return batteryinfo
        except:
            return get_battery_profiler()

    else:
        cmd = ['/usr/sbin/ioreg', '-a', '-n', 'AppleSmartBattery', '-r']
        output = subprocess.check_output(cmd)
        try:
            try:
                plist = plistlib.readPlistFromString(output)
            except AttributeError as e:
                plist = plistlib.loads(output)
            batteryxml = plist[0]

            cpu_arch = os.uname()[3].lower()

            batteryinfo = get_battery_profiler()
            for item in batteryxml:
                if item == 'DesignCapacity':
                    batteryinfo['DesignCapacity'] = batteryxml[item]
                elif item == 'MaxCapacity' and ('x86_64' in cpu_arch or 'i386' in cpu_arch):
                    batteryinfo['MaxCapacity'] = batteryxml[item]
                elif item == 'AppleRawMaxCapacity' and ('arm' in cpu_arch or 'arm64' in cpu_arch):
                    batteryinfo['MaxCapacity'] = batteryxml[item]
                elif item == 'CurrentCapacity' and (cpu_arch == 'i386' or cpu_arch == 'x86_64'):
                    batteryinfo['CurrentCapacity'] = batteryxml[item]
                elif item == 'AppleRawCurrentCapacity' and ('arm' in cpu_arch or 'arm64' in cpu_arch):
                    batteryinfo['CurrentCapacity'] = batteryxml[item]
                elif item == 'Temperature':
                    batteryinfo['Temperature'] = batteryxml[item]
                elif item == 'TimeRemaining':
                    batteryinfo['TimeRemaining'] = batteryxml[item]
                elif item == 'InstantTimeToEmpty':
                    batteryinfo['InstantTimeToEmpty'] = batteryxml[item]
                elif item == 'PackReserve':
                    batteryinfo['PackReserve'] = batteryxml[item]
                elif item == 'AvgTimeToFull':
                    batteryinfo['AvgTimeToFull'] = batteryxml[item]
                elif item == 'AvgTimeToEmpty':
                    batteryinfo['AvgTimeToEmpty'] = batteryxml[item]
                elif item == 'DesignCycleCount9C':
                    batteryinfo['DesignCycleCount9C'] = batteryxml[item]
                elif item == 'CycleCount':
                    batteryinfo['CycleCount'] = batteryxml[item]
                elif item == 'PermanentFailureStatus':
                    batteryinfo['PermanentFailureStatus'] = batteryxml[item]
                elif item == 'BatteryInstalled' and batteryxml[item] == "FALSE":
                    batteryinfo['condition'] = "No Battery"
                elif item == 'Serial': # macOS 11+ battery serial is here
                    batteryinfo['BatterySerialNumber'] = batteryxml[item]
                    batteryinfo['ManufactureDate'] = process_manufacture_date(batteryxml[item])
                elif item == 'BatteryData':
                    if 'CellVoltage' in batteryxml[item]: # macOS 11+ stores cell voltage here
                        cells = []
                        for cell in batteryxml[item]['CellVoltage']:
                            if cell > 0:
                                cells.append(str(float(cell)/1000)+"v")
                        batteryinfo['CellVoltage'] = (', '.join(map(str,(cells))))

                    if 'Serial' in batteryxml[item]: # Battery serial is sometimes here
                        batteryinfo['BatterySerialNumber'] = batteryxml[item]
                        batteryinfo['ManufactureDate'] = process_manufacture_date(batteryxml[item])

                    if 'LifetimeData' in batteryxml[item]:
                        if "MaximumChargeCurrent" in batteryxml[item]['LifetimeData']:
                            batteryinfo['max_charge_current'] = batteryxml[item]['LifetimeData']['MaximumChargeCurrent']
                        if "MaximumDischargeCurrent" in batteryxml[item]['LifetimeData']:
                            batteryinfo['max_discharge_current'] = batteryxml[item]['LifetimeData']['MaximumDischargeCurrent']
                        if "MaximumPackVoltage" in batteryxml[item]['LifetimeData']:
                            batteryinfo['max_pack_voltage'] = batteryxml[item]['LifetimeData']['MaximumPackVoltage']
                        if "MinimumPackVoltage" in batteryxml[item]['LifetimeData']:
                            batteryinfo['min_pack_voltage'] = batteryxml[item]['LifetimeData']['MinimumPackVoltage']
                        if "MaximumTemperature" in batteryxml[item]['LifetimeData']:
                            batteryinfo['max_temperature'] = batteryxml[item]['LifetimeData']['MaximumTemperature']
                        if "MinimumTemperature" in batteryxml[item]['LifetimeData']:
                            batteryinfo['min_temperature'] = batteryxml[item]['LifetimeData']['MinimumTemperature']

                elif item == 'ManufactureDate': # 10.15- has Manufacture Date here
                    batteryinfo['ManufactureDate'] = batteryxml[item]
                elif item == 'Voltage':
                    batteryinfo['Voltage'] = batteryxml[item]/float(1000)
                elif item == 'CellVoltage': # macOS 10.15- stores cell voltage here
                    cells = []
                    for cell in batteryxml[item]:
                        if cell > 0:
                            cells.append(str(float(cell)/1000)+"v")
                    batteryinfo['CellVoltage'] = (', '.join(map(str,(cells))))
                elif item == 'AdapterDetails':
                    if 'Current' in batteryxml[item]:
                        batteryinfo['adapter_current'] = format((float(batteryxml[item]['Current'])/1000),'.3f')
                    if 'Voltage' in batteryxml[item]:
                        batteryinfo['adapter_voltage'] = format((float(batteryxml[item]['Voltage'])/1000),'.3f')
                    if 'Description' in batteryxml[item]:
                        batteryinfo['adapter_description'] = batteryxml[item]['Description']
                elif item == 'ChargerData':
                    if 'ChargingCurrent' in batteryxml[item]:
                        batteryinfo['charging_current'] = format((float(batteryxml[item]['ChargingCurrent'])/1000),'.3f')
                    if 'ChargingVoltage' in batteryxml[item]:
                        batteryinfo['charging_voltage'] = format((float(batteryxml[item]['ChargingVoltage'])/1000),'.3f')
                    if 'Description' in batteryxml[item]:
                        batteryinfo['adapter_description'] = batteryxml[item]['Description']
            return batteryinfo
        except:
            return get_battery_profiler()
    
def get_pmset_accps():
        
    accpsinfo = get_battery_stats()
    
    # macOS 10.8 (Darwin 12)
    if getDarwinVersion() < 12:
        return accpsinfo
    
    cmd = ['/usr/bin/pmset', '-g', 'accps']
    output = subprocess.check_output(cmd)

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if "UPS" in item:
            item = item.replace("%;", "%;\n")
            item = item.replace(")", ")\n")
            item = item.replace("(id=", "\n(id=")
            for upsonly in item.split("\n"):
                if " -" in upsonly:
                    accpsinfo['UPSName'] = upsonly[2:].strip()
                elif "%;" in upsonly:
                    accpsinfo['UPSPercent'] = re.sub('[^0-9]','', upsonly.strip())
                elif "charging present: " in upsonly:
                    accpsinfo['UPSStatus'] = remove_all("charging present: ", upsonly).strip()
        elif "Now drawing from '" in item:
                    accpsinfo['Nowdrawing'] = remove_all("'", remove_all("Now drawing from '", item)).strip()
    return accpsinfo

def get_pmset_assertions():
    cmd = ['/usr/bin/pmset', '-g', 'assertions']
    output = subprocess.check_output(cmd)
    assertionsinfo = get_pmset_accps()

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if "   BackgroundTask                 " in item:
            assertionsinfo['BackgroundTask'] = re.sub('[^0-9]','', item.strip())
        elif "   ApplePushServiceTask           " in item:
            assertionsinfo['ApplePushServiceTask'] = re.sub('[^0-9]','', item.strip())
        elif "   UserIsActive                   " in item:
            assertionsinfo['UserIsActive'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventUserIdleDisplaySleep    " in item:
            assertionsinfo['PreventUserIdleDisplaySleep'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventSystemSleep             " in item:
            assertionsinfo['PreventSystemSleep'] = re.sub('[^0-9]','', item.strip())
        elif "   ExternalMedia                  " in item:
            assertionsinfo['ExternalMedia'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventUserIdleSystemSleep     " in item:
            assertionsinfo['PreventUserIdleSystemSleep'] = re.sub('[^0-9]','', item.strip())
        elif "   NetworkClientActive            " in item:
            assertionsinfo['NetworkClientActive'] = re.sub('[^0-9]','', item.strip())
    return assertionsinfo

def get_pmset_sysload():
    cmd = ['/usr/bin/pmset', '-g', 'sysload']
    output = subprocess.check_output(cmd)
    sysloadinfo = get_pmset_assertions()

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if "  combined level = " in item:
            sysloadinfo['combinedlevel'] = remove_all("  combined level = ", item).strip()
        elif "  - user level = " in item:
            sysloadinfo['user'] = remove_all("  - user level = ", item).strip()
        elif "  - battery level = " in item:
            sysloadinfo['battery'] = remove_all("  - battery level = ", item).strip()
        elif "  - thermal level = " in item:
            sysloadinfo['thermal'] = remove_all("  - thermal level = ", item).strip()
    return sysloadinfo

def get_pmset_therm():
    
    therminfo = get_pmset_sysload()
    
    # macOS 10.8 (Darwin 12)
    if getDarwinVersion() < 12:
        return therminfo
    
    cmd = ['/usr/bin/pmset', '-g', 'therm']
    output = subprocess.check_output(cmd)
    output = output.decode("utf-8", errors="ignore").replace("CPU_Scheduler_Limit", "\nCPU_Scheduler_Limit")

    for item in output.split("\n"):
        if "CPU_Scheduler_Limit" in item:
            therminfo['CPUSchedulerLimit'] = re.sub('[^0-9]','', item.strip())
        elif "CPU_Available_CPUs" in item:
            therminfo['CPUAvailableCPUs'] = re.sub('[^0-9]','', item.strip())
        elif "CPU_Speed_Limit" in item:
            therminfo['CPUSpeedLimit'] = re.sub('[^0-9]','', item.strip())
    return therminfo

def get_pmset_stats():
    
    statsinfo = get_pmset_therm()
    
    # macOS 10.8 (Darwin 12)
    if getDarwinVersion() < 12:
        return statsinfo
    
    cmd = ['/usr/bin/pmset', '-g', 'stats']
    output = subprocess.check_output(cmd)

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if "Sleep Count:" in item:
            statsinfo['SleepCount'] = re.sub('[^0-9]','', item.strip())
        elif "Dark Wake Count:" in item:
            statsinfo['DarkWake'] = re.sub('[^0-9]','', item.strip())
        elif "User Wake Count:" in item:
            statsinfo['UserWake'] = re.sub('[^0-9]','', item.strip())
    return statsinfo

def get_pmset_sched():
    cmd = ['/usr/bin/pmset', '-g', 'sched']
    output = subprocess.check_output(cmd)
    schedinfo = get_pmset_stats()
    schedinfo['schedule'] = output
    return schedinfo

def get_pmset_ups():
    cmd = ['/usr/bin/pmset', '-g', 'ups']
    output = subprocess.check_output(cmd)
    upsinfo = get_pmset_sched()

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if "haltlevel" in item:
            upsinfo['haltlevel'] = re.sub('[^0-9]','', item.strip())
        elif "haltafter" in item:
            upsinfo['haltafter'] = re.sub('[^0-9]','', item.strip())
        elif "haltremain" in item:
            upsinfo['haltremain'] = re.sub('[^0-9]','', item.strip())
    return upsinfo
            
def get_pmset_general():
    cmd = ['/usr/bin/pmset', '-g']
    output = subprocess.check_output(cmd)
    powerinfo = get_pmset_ups()

    for item in output.decode("utf-8", errors="ignore").split("\n"):
        if " standbydelay" in item:
            powerinfo['standbydelay'] = re.sub('[^0-9]','', item.strip())
        elif " standby" in item:
            powerinfo['standby'] = re.sub('[^0-9]','', item.strip())
        elif " womp" in item:
            powerinfo['womp'] = re.sub('[^0-9]','', item.strip())
        elif " halfdim" in item:
            powerinfo['halfdim'] = re.sub('[^0-9]','', item.strip())
        elif " hibernatefile" in item:
            powerinfo['hibernatefile'] = remove_all(" hibernatefile", item).strip()
        elif " gpuswitch" in item:
            powerinfo['gpuswitch'] = re.sub('[^0-9]','', item.strip())
        elif " sms" in item:
            powerinfo['sms'] = re.sub('[^0-9]','', item.strip())
        elif " networkoversleep" in item:
            powerinfo['networkoversleep'] = re.sub('[^0-9]','', item.strip())
        elif " disksleep" in item:
            powerinfo['disksleep'] = re.sub('[^0-9]','', item.strip())
        elif " displaysleep" in item:
            powerinfo['displaysleep'] = re.sub('[^0-9]','', item.strip())
        elif " autopoweroffdelay" in item:
            powerinfo['autopoweroffdelay'] = re.sub('[^0-9]','', item.strip())
        elif " hibernatemode" in item:
            powerinfo['hibernatemode'] = re.sub('[^0-9]','', item.strip())
        elif " autopoweroff" in item:
            powerinfo['autopoweroff'] = re.sub('[^0-9]','', item.strip())
        elif " ttyskeepawake" in item:
            powerinfo['ttyskeepawake'] = re.sub('[^0-9]','', item.strip())
        elif " acwake" in item:
            powerinfo['acwake'] = re.sub('[^0-9]','', item.strip())
        elif " lidwake" in item:
            powerinfo['lidwake'] = re.sub('[^0-9]','', item.strip())
        elif " powernap" in item:
            powerinfo['powernap'] = re.sub('[^0-9]','', item.strip())
        elif " autorestart" in item:
            powerinfo['autorestart'] = re.sub('[^0-9]','', item.strip())
        elif " DestroyFVKeyOnStandby" in item:
            powerinfo['DestroyFVKeyOnStandby'] = re.sub('[^0-9]','', item.strip())
        elif " Sleep On Power Button " in item:
            powerinfo['SleepOn'] = re.sub('[^0-9]','', item.strip())
        elif " lessbright" in item:
            powerinfo['lessbright'] = re.sub('[^0-9]','', item.strip())
        elif " sleep" in item:
            try:
                powerinfo['sleep_prevented_by'] = re.search('\(.*\)', item).group(0).replace("(sleep prevented by ", "").replace(")", "").strip()
            except:
                powerinfo['sleep_prevented_by_error'] = ""
            powerinfo['sleep'] = (re.sub('[^0-9]','', re.sub(r'\(.+?\)', '', item))).strip()

    return powerinfo

def process_manufacture_date(serial):

    try:
        try:
            # The format for battery manufacturing date changed in Big Sur.
            # Apple suggested parsing the SerialNumber that contains the manufacture date.
            # A SN of XXX1234ZZZZZZZZZZ has the manufacturing date as the values of 1234.
            # The first digit is the last digit of the year. 9 would be 2019.
            #   Note: they reset every decade. So you need to figure out if 9 is 2019 or 2029
            battery_serial_number = serial
            battery_year_sn_digit = int(battery_serial_number[3])
            # The next two digits are the week number of the year
            battery_week_sn_digit = int(battery_serial_number[4:6])
            # The last digit is the day offset: 1 is Monday 7 is Sunday.
            battery_day_sn_digit = int(battery_serial_number[6])
        except:
            # The serial may also be shifted
            battery_serial_number = serial
            battery_year_sn_digit = int(battery_serial_number[2])
            # The next two digits are the week number of the year
            battery_week_sn_digit = int(battery_serial_number[3:5])
            # The last digit is the day offset: 1 is Monday 7 is Sunday.
            battery_day_sn_digit = int(battery_serial_number[5])

        # Determine the decade for the battery year
        current_decade = datetime.date.today().year - datetime.date.today().year % 10
        battery_year = current_decade + battery_year_sn_digit
        if (battery_year, battery_week_sn_digit) > datetime.date.today().isocalendar()[:2]:
            battery_year -= 10

        # Set the variable of the date to year-Wweek-day:
        #           For example: 2018-10-20 = 2018-W42-5
        battery_date_data = str(battery_year) + '-W' + str(battery_week_sn_digit) + '-' + str(battery_day_sn_digit)

        # Python's evaluation of the week number does not respect the ISO week numbers.
        #   Reference: https://community.dataiku.com/t5/Using-Dataiku-DSS/Converting-week-and-year-to-datetime-stamp-using-Python-function/m-p/11310
        # This is addressed in Python 3.6+ with using the datetime strptime format of '%G %V %w'
        # To be backward compatible with 2.7 the additional work will need to exist.
        def iso_year_start(iso_year):
            "The gregorian calendar date of the first day of the given ISO year"
            fourth_jan = datetime.date(iso_year, 1, 4)
            delta = datetime.timedelta(fourth_jan.isoweekday()-1)
            return fourth_jan - delta 

        def iso_to_gregorian(iso_year, iso_week, iso_day):
            "Gregorian calendar date for the given ISO year, week and day"
            year_start = iso_year_start(iso_year)
            return year_start + datetime.timedelta(days=iso_day-1, weeks=iso_week-1)   

        dt = iso_to_gregorian(battery_year, battery_week_sn_digit, battery_day_sn_digit)
        battery_date = dt.strftime("%Y-%m-%d")
        # Calculate the date based off the year-week-day with a datetime value in the format YYYY-MM-DD
        #battery_date = datetime.datetime.strptime(battery_date_data, "%Y-W%W-%w")

        # Convert the date values to binary format
        binary_date_day = '{0:05b}'.format(int(battery_date.split("-")[2]))
        binary_date_month = '{0:04b}'.format(int(battery_date.split("-")[1]))
        binary_date_year = '{0:07b}'.format(int(battery_year) - 1980)
        # Combine the binary values into one long string of YYYYYYYMMMMDDDDD 
        #   to match the legacy battery ManufactureDate format
        binary_full_date = binary_date_year + binary_date_month + binary_date_day
        packed_date = int(binary_full_date, 2)

        return packed_date
    except:
        return ""

def remove_all(substr, str):
    return str.replace(substr, "")

def getDarwinVersion():
    """Returns the Darwin version."""
    # Catalina -> 10.15.7 -> 19.6.0 -> 19
    # os_version_tuple = platform.mac_ver()[0].split('.')
    # return int(os_version_tuple[1])
    darwin_version_tuple = platform.release().split('.')
    return int(darwin_version_tuple[0]) 

def main():

    """Main"""
    # Remove old power.sh script, if it exists
    if os.path.isfile(os.path.dirname(os.path.realpath(__file__))+'/power.sh'):
        os.remove(os.path.dirname(os.path.realpath(__file__))+'/power.sh')

    # Get results
    info = get_pmset_general()

    # Write power results to cache file
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    output_plist = os.path.join(cachedir, 'powerinfo.plist')
    try:
        plistlib.writePlist(info, output_plist)
    except:
        with open(output_plist, 'wb') as fp:
            plistlib.dump(info, fp, fmt=plistlib.FMT_XML)

if __name__ == "__main__":
    main()
