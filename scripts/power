#! /usr/bin/python
# power script by tuxudo for MunkiReport

import subprocess
import plistlib
import os
import sys
import string
import re
import platform

def get_battery_profiler():
    '''Uses system profiler to get power info for this machine.'''
    cmd = ['/usr/sbin/system_profiler', 'SPPowerDataType', '-xml']
    output = subprocess.check_output(cmd)
    plist = plistlib.readPlistFromString(output)

    # system_profiler xml is an array
    sp_dict = plist[0]
    items = sp_dict['_items']

    batteryprofiler = {}

    for obj in items:
        for item in obj:
            if item == 'sppower_current_amperage':
                batteryprofiler['AmperagemA'] = format((float(obj[item])/1000),'.3f')
            elif item == 'sppower_current_voltage':
                batteryprofiler['Voltage'] = format((float(obj[item])/1000),'.3f')
            elif item == 'sppower_battery_charger_connected':
                batteryprofiler['ExternalConnected'] = obj[item]
            elif item == 'sppower_ac_charger_ID':
                batteryprofiler['AdapterID'] = obj[item]
            elif item == 'sppower_ac_charger_watts':
                batteryprofiler['attage'] = obj[item] # This is not a typo
            elif item == 'sppower_ac_charger_family':
                batteryprofiler['FamilyCode'] = obj[item]
            elif item == 'sppower_ac_charger_serial_number':
                batteryprofiler['SerialNumber'] = obj[item]
            elif item == 'sppower_ups_installed':
                batteryprofiler['UPSInstalled'] = obj[item]
            elif item == 'sppower_battery_health_info':
                batteryprofiler['condition'] = obj['sppower_battery_health_info']['sppower_battery_health']
            elif item == 'sppower_battery_installed' and obj['sppower_battery_installed'] == "FALSE":
                batteryprofiler['condition'] = "No Battery"
            elif item == 'sppower_battery_charge_info':
                if 'sppower_battery_max_capacity' in obj[item]: # Keep for 10.8- compatibility vv
                    batteryprofiler['MaxCapacity'] = obj[item]['sppower_battery_max_capacity']
                if 'sppower_battery_current_capacity' in obj[item]:
                    batteryprofiler['CurrentCapacity'] = obj[item]['sppower_battery_current_capacity'] # Keep for 10.8- compatibility ^^
                if 'sppower_battery_is_charging' in obj[item]:
                    batteryprofiler['IsCharging'] = obj[item]['sppower_battery_is_charging']
                if 'sppower_battery_fully_charged' in obj[item]:
                    batteryprofiler['FullyCharged'] = obj[item]['sppower_battery_fully_charged']
#                if 'sppower_battery_state_of_charge' in obj[item]:
#                    batteryprofiler['CurCharge'] = obj[item]['sppower_battery_state_of_charge']
            elif item == 'sppower_battery_model_info':
                if 'sppower_battery_firmware_version' in obj[item]:
                    batteryprofiler['FirmwareVersion'] = obj[item]['sppower_battery_firmware_version']
                if 'sppower_battery_device_name' in obj[item]:
                    batteryprofiler['BatteryName'] = obj[item]['sppower_battery_device_name']
                if 'sppower_battery_manufacturer' in obj[item]:
                    batteryprofiler['Manufacturer'] = obj[item]['sppower_battery_manufacturer']
                if 'sppower_battery_serial_number' in obj[item]:
                    batteryprofiler['BatterySerialNumber'] = obj[item]['sppower_battery_serial_number']
                if 'sppower_battery_hardware_revision' in obj[item]:
                    batteryprofiler['BatteryRevision'] = obj[item]['sppower_battery_hardware_revision']
                if 'sppower_battery_cell_revision' in obj[item]:
                    batteryprofiler['BatteryCellRevision'] = obj[item]['sppower_battery_cell_revision']

    return batteryprofiler

def get_battery_stats():
    
    if getOsVersion() < 8:
        # 10.8 and lower return this value differently
        cmd = ['/usr/sbin/ioreg', '-n', 'AppleSmartBattery', '-r']
        output = subprocess.check_output(cmd)
        try:
            for item in output.split("\n"):
                if "DesignCapacity" in item:
                    batteryinfo['DesignCapacity'] = remove_all('      "DesignCapacity" = ', item).strip()
                elif "Temperature" in item:
                    batteryinfo['Temperature'] = re.sub('[^0-9]','', remove_all('      "Temperature" = ', item).strip())
                elif "TimeRemaining" in item:
                    batteryinfo['TimeRemaining'] = remove_all('      "TimeRemaining" = ', item).strip()
                elif "InstantTimeToEmpty" in item:
                    batteryinfo['InstantTimeToEmpty'] = remove_all('      "InstantTimeToEmpty" = ', item).strip()
                elif "PackReserve" in item:
                    batteryinfo['PackReserve'] = remove_all('      "PackReserve" = ', item).strip()
                elif "AvgTimeToFull" in item:
                    batteryinfo['AvgTimeToFull'] = remove_all('      "AvgTimeToFull" = ', item).strip()
                elif "AvgTimeToEmpty" in item:
                    batteryinfo['AvgTimeToEmpty'] = remove_all('      "AvgTimeToEmpty" = ', item).strip()
                elif "DesignCycleCount9C" in item:
                    batteryinfo['DesignCycleCount9C'] = remove_all('      "DesignCycleCount9C" = ', item).strip()
                elif "PermanentFailureStatus" in item:
                    batteryinfo['PermanentFailureStatus'] = remove_all('      "PermanentFailureStatus" = ', item).strip()
                elif "ManufactureDate" in item:
                    batteryinfo['ManufactureDate'] = remove_all('      "ManufactureDate" = ', item).strip()
                    
            return batteryinfo
        except:
            return get_battery_profiler()
    
    else:
        cmd = ['/usr/sbin/ioreg', '-a', '-n', 'AppleSmartBattery', '-r']
        output = subprocess.check_output(cmd)
        try:
            plist = plistlib.readPlistFromString(output)
            batteryxml = plist[0]

            batteryinfo = get_battery_profiler()
            for item in batteryxml:
                    if item == 'DesignCapacity':
                        batteryinfo['DesignCapacity'] = batteryxml[item]
                    elif item == 'MaxCapacity': 
#                        if platform.processor() == 'arm':
#                            batteryinfo['MaxCapacity'] = batteryxml[item] * batteryinfo['MaxCapacity'] / 100
#                        else:
                            batteryinfo['MaxCapacity'] = batteryxml[item]
                    elif item == 'CurrentCapacity':
#                        if platform.processor() == 'arm':
#                            batteryinfo['CurrentCapacity'] = batteryxml[item] * batteryinfo['CurrentCapacity'] / 100
#                        else:
                            batteryinfo['CurrentCapacity'] = batteryxml[item]
                    elif item == 'Temperature':
                        batteryinfo['Temperature'] = batteryxml[item]
                    elif item == 'TimeRemaining':
                        batteryinfo['TimeRemaining'] = batteryxml[item]
                    elif item == 'InstantTimeToEmpty':
                        batteryinfo['InstantTimeToEmpty'] = batteryxml[item]
                    elif item == 'PackReserve':
                        batteryinfo['PackReserve'] = batteryxml[item]
                    elif item == 'AvgTimeToFull':
                        batteryinfo['AvgTimeToFull'] = batteryxml[item]
                    elif item == 'AvgTimeToEmpty':
                        batteryinfo['AvgTimeToEmpty'] = batteryxml[item]
                    elif item == 'DesignCycleCount9C':
                        batteryinfo['DesignCycleCount9C'] = batteryxml[item]
                    elif item == 'CycleCount':
                        batteryinfo['CycleCount'] = batteryxml[item]
                    elif item == 'PermanentFailureStatus':
                        batteryinfo['PermanentFailureStatus'] = batteryxml[item]
                    elif item == 'BatteryInstalled' and batteryxml[item] == "FALSE":
                        batteryinfo['condition'] = "No Battery"
                    elif item == 'BatteryData':
                        batteryinfo['ManufactureDate'] = "Unknown"
                        if item == 'CellVoltage': # macOS 11+ stores cell voltage here
                            cells = []
                            for cell in batteryxml[item]:
                                if cell > 0:
                                    cells.append(str(float(cell)/1000)+"v")
                            batteryinfo['CellVoltage'] = (', '.join(map(str,(cells))))
                    if item == 'Serial': # macOS 11+ battery serial is here
                        batteryinfo['BatterySerialNumber'] = batteryxml[item]
                    elif item == 'ManufactureDate':
                        batteryinfo['ManufactureDate'] = batteryxml[item]
                    elif item == 'Voltage':
                        batteryinfo['Voltage'] = batteryxml[item]/float(1000)
                    elif item == 'CellVoltage': # macOS 10.15- stores cell voltage here
                        cells = []
                        for cell in batteryxml[item]:
                            if cell > 0:
                                cells.append(str(float(cell)/1000)+"v")
                        batteryinfo['CellVoltage'] = (', '.join(map(str,(cells))))
                    elif item == 'AdapterDetails':
                        if 'Current' in batteryxml[item]:
                            batteryinfo['adapter_current'] = format((float(batteryxml[item]['Current'])/1000),'.3f')
                        if 'Voltage' in batteryxml[item]:
                            batteryinfo['adapter_voltage'] = format((float(batteryxml[item]['Voltage'])/1000),'.3f')
                    elif item == 'ChargerData':
                        if 'ChargingCurrent' in batteryxml[item]:
                            batteryinfo['charging_current'] = format((float(batteryxml[item]['ChargingCurrent'])/1000),'.3f')
                        if 'ChargingVoltage' in batteryxml[item]:
                            batteryinfo['charging_voltage'] = format((float(batteryxml[item]['ChargingVoltage'])/1000),'.3f')
            return batteryinfo
        except:
            return get_battery_profiler()
    
def get_pmset_accps():
        
    accpsinfo = get_battery_stats()
    
    if getOsVersion() < 8:
        return accpsinfo
    
    cmd = ['/usr/bin/pmset', '-g', 'accps']
    output = subprocess.check_output(cmd)

    for item in output.split("\n"):
        if "UPS" in item:
            item = item.replace("%;", "%;\n")
            item = item.replace(")", ")\n")
            item = item.replace("(id=", "\n(id=")
            for upsonly in item.split("\n"):
                if " -" in upsonly:
                    accpsinfo['UPSName'] = upsonly[2:].strip()
                elif "%;" in upsonly:
                    accpsinfo['UPSPercent'] = re.sub('[^0-9]','', upsonly.strip())
                elif "charging present: " in upsonly:
                    accpsinfo['UPSStatus'] = remove_all("charging present: ", upsonly).strip()
        elif "Now drawing from '" in item:
                    accpsinfo['Nowdrawing'] = remove_all("'", remove_all("Now drawing from '", item)).strip()
    return accpsinfo

def get_pmset_assertions():
    cmd = ['/usr/bin/pmset', '-g', 'assertions']
    output = subprocess.check_output(cmd)
    assertionsinfo = get_pmset_accps()

    for item in output.split("\n"):
        if "   BackgroundTask                 " in item:
            assertionsinfo['BackgroundTask'] = re.sub('[^0-9]','', item.strip())
        elif "   ApplePushServiceTask           " in item:
            assertionsinfo['ApplePushServiceTask'] = re.sub('[^0-9]','', item.strip())
        elif "   UserIsActive                   " in item:
            assertionsinfo['UserIsActive'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventUserIdleDisplaySleep    " in item:
            assertionsinfo['PreventUserIdleDisplaySleep'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventSystemSleep             " in item:
            assertionsinfo['PreventSystemSleep'] = re.sub('[^0-9]','', item.strip())
        elif "   ExternalMedia                  " in item:
            assertionsinfo['ExternalMedia'] = re.sub('[^0-9]','', item.strip())
        elif "   PreventUserIdleSystemSleep     " in item:
            assertionsinfo['PreventUserIdleSystemSleep'] = re.sub('[^0-9]','', item.strip())
        elif "   NetworkClientActive            " in item:
            assertionsinfo['NetworkClientActive'] = re.sub('[^0-9]','', item.strip())
    return assertionsinfo

def get_pmset_sysload():
    cmd = ['/usr/bin/pmset', '-g', 'sysload']
    output = subprocess.check_output(cmd)
    sysloadinfo = get_pmset_assertions()

    for item in output.split("\n"):
        if "  combined level = " in item:
            sysloadinfo['combinedlevel'] = remove_all("  combined level = ", item).strip()
        elif "  - user level = " in item:
            sysloadinfo['user'] = remove_all("  - user level = ", item).strip()
        elif "  - battery level = " in item:
            sysloadinfo['battery'] = remove_all("  - battery level = ", item).strip()
        elif "  - thermal level = " in item:
            sysloadinfo['thermal'] = remove_all("  - thermal level = ", item).strip()
    return sysloadinfo

def get_pmset_therm():
    
    therminfo = get_pmset_sysload()
    
    if getOsVersion() < 8:
        return therminfo
    
    cmd = ['/usr/bin/pmset', '-g', 'therm']
    output = subprocess.check_output(cmd)
    output = output.replace("CPU_Scheduler_Limit", "\nCPU_Scheduler_Limit")

    for item in output.split("\n"):
        if "CPU_Scheduler_Limit 	= " in item:
            therminfo['CPUSchedulerLimit'] = re.sub('[^0-9]','', item.strip())
        elif "	CPU_Available_CPUs 	= " in item:
            therminfo['CPUAvailableCPUs'] = re.sub('[^0-9]','', item.strip())
        elif "	CPU_Speed_Limit 	= " in item:
            therminfo['CPUSpeedLimit'] = re.sub('[^0-9]','', item.strip())
    return therminfo

def get_pmset_stats():
    
    statsinfo = get_pmset_therm()
    
    if getOsVersion() < 8:
        return statsinfo
    
    cmd = ['/usr/bin/pmset', '-g', 'stats']
    output = subprocess.check_output(cmd)

    for item in output.split("\n"):
        if "Sleep Count:" in item:
            statsinfo['SleepCount'] = re.sub('[^0-9]','', item.strip())
        elif "Dark Wake Count:" in item:
            statsinfo['DarkWake'] = re.sub('[^0-9]','', item.strip())
        elif "User Wake Count:" in item:
            statsinfo['UserWake'] = re.sub('[^0-9]','', item.strip())
    return statsinfo

def get_pmset_sched():
    cmd = ['/usr/bin/pmset', '-g', 'sched']
    output = subprocess.check_output(cmd)
    schedinfo = get_pmset_stats()
    schedinfo['schedule'] = output
    return schedinfo

def get_pmset_ups():
    cmd = ['/usr/bin/pmset', '-g', 'ups']
    output = subprocess.check_output(cmd)
    upsinfo = get_pmset_sched()

    for item in output.split("\n"):
        if "  haltlevel	" in item:
            upsinfo['haltlevel'] = re.sub('[^0-9]','', item.strip())
        elif "  haltafter	" in item:
            upsinfo['haltafter'] = re.sub('[^0-9]','', item.strip())
        elif "  haltremain	" in item:
            upsinfo['haltremain'] = re.sub('[^0-9]','', item.strip())
    return upsinfo
            
def get_pmset_general():
    cmd = ['/usr/bin/pmset', '-g']
    output = subprocess.check_output(cmd)
    powerinfo = get_pmset_ups()

    for item in output.split("\n"):
        if " standbydelay" in item:
            powerinfo['standbydelay'] = re.sub('[^0-9]','', item.strip())
        elif " standby" in item:
            powerinfo['standby'] = re.sub('[^0-9]','', item.strip())
        elif " womp" in item:
            powerinfo['womp'] = re.sub('[^0-9]','', item.strip())
        elif " halfdim" in item:
            powerinfo['halfdim'] = re.sub('[^0-9]','', item.strip())
        elif " hibernatefile" in item:
            powerinfo['hibernatefile'] = remove_all(" hibernatefile", item).strip()
        elif " gpuswitch" in item:
            powerinfo['gpuswitch'] = re.sub('[^0-9]','', item.strip())
        elif " sms" in item:
            powerinfo['sms'] = re.sub('[^0-9]','', item.strip())
        elif " networkoversleep" in item:
            powerinfo['networkoversleep'] = re.sub('[^0-9]','', item.strip())
        elif " disksleep" in item:
            powerinfo['disksleep'] = re.sub('[^0-9]','', item.strip())
        elif " displaysleep" in item:
            powerinfo['displaysleep'] = re.sub('[^0-9]','', item.strip())
        elif " autopoweroffdelay" in item:
            powerinfo['autopoweroffdelay'] = re.sub('[^0-9]','', item.strip())
        elif " hibernatemode" in item:
            powerinfo['hibernatemode'] = re.sub('[^0-9]','', item.strip())
        elif " autopoweroff" in item:
            powerinfo['autopoweroff'] = re.sub('[^0-9]','', item.strip())
        elif " ttyskeepawake" in item:
            powerinfo['ttyskeepawake'] = re.sub('[^0-9]','', item.strip())
        elif " acwake" in item:
            powerinfo['acwake'] = re.sub('[^0-9]','', item.strip())
        elif " lidwake" in item:
            powerinfo['lidwake'] = re.sub('[^0-9]','', item.strip())
        elif " powernap" in item:
            powerinfo['powernap'] = re.sub('[^0-9]','', item.strip())
        elif " autorestart" in item:
            powerinfo['autorestart'] = re.sub('[^0-9]','', item.strip())
        elif " DestroyFVKeyOnStandby" in item:
            powerinfo['DestroyFVKeyOnStandby'] = re.sub('[^0-9]','', item.strip())
        elif " Sleep On Power Button " in item:
            powerinfo['SleepOn'] = re.sub('[^0-9]','', item.strip())
        elif " lessbright" in item:
            powerinfo['lessbright'] = re.sub('[^0-9]','', item.strip())
        elif " sleep" in item:
            try:
                powerinfo['sleep_prevented_by'] = re.search('\(.*\)', item).group(0).replace("(sleep prevented by ", "").replace(")", "").strip()
            except:
                powerinfo['sleep_prevented_by_error'] = ""
            powerinfo['sleep'] = (re.sub('[^0-9]','', re.sub(r'\(.+?\)', '', item))).strip()

    return powerinfo

def remove_all(substr, str):
    index = 0
    length = len(substr)
    while string.find(str, substr) != -1:
        index = string.find(str, substr)
        str = str[0:index] + str[index+length:]
    return str
  
def getOsVersion():
    """Returns the minor OS version."""
    os_version_tuple = platform.mac_ver()[0].split('.')
    return int(os_version_tuple[1])
    
def main():

    """Main"""
    # Remove old power.sh script, if it exists
    if os.path.isfile(os.path.dirname(os.path.realpath(__file__))+'/power.sh'):
        os.remove(os.path.dirname(os.path.realpath(__file__))+'/power.sh')

    # Get results
    info = get_pmset_general()

    # Write power results to cache file
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    output_plist = os.path.join(cachedir, 'powerinfo.plist')
    plistlib.writePlist(info, output_plist)
#    print plistlib.writePlistToString(info)

if __name__ == "__main__":
    main()
